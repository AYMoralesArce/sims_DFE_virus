//How to run:
//slim -d ${repID} -d d_f1=f1 -d d_f2=f2 -d d_f3=f3 -d "d_rep='replicate number'" -d "d_folder='path/to/output/folder'" virus_eqm_dfe_WF_diploid.slim
initialize()
{
    setSeed(d_seed);

    //define constants:
    defineConstant("N",5000);
    defineConstant("mutn_rate",2.0e-4);
    defineConstant("rec_rate",2.0e-8);
    defineConstant("chr_len",10000);

    //define selection coefficient boundaries:
    defineConstant("t0", 0.0);
    defineConstant("t1", -1.0/(2*N));
    defineConstant("t2", -10.0/(2*N));
    defineConstant("t3", -100.0/(2*N));
    defineConstant("t4", -1.0);
    print(2*N);
    print(t0);
    print(t1);
    print(t2);
    print(t3);
    print(t4);

    // set the overall mutation rate
    initializeMutationRate(mutn_rate);

    //specifying the DFE:
    initializeMutationType("m1", 1.0, "s", "return runif(1, t1, t0);"); //neutral, 2Nes = [0,-1]
    initializeMutationType("m2", 1.0, "s", "return runif(1, t2, t1);"); //weakly deleterious, 1<|2Nes|<10, uniform distribution
    initializeMutationType("m3", 1.0, "s", "return runif(1, t3, t2);"); //moderately deleterious, 10<|2Nes|<100, uniform distribution
    initializeMutationType("m4", 1.0, "s", "return runif(1, t4, t3);"); //strongly deleterious, 100<|2Nes|<10000, uniform distribution

    // g1 genomic element type: uses m1 for all mutations
    initializeGenomicElementType("g1", c(m1,m2,m3,m4), c(0.30, d_f1, d_f2, d_f3));
    initializeGenomicElement(g1, 0, chr_len-1);

    initializeRecombinationRate(rec_rate);
}

// part 2 (burn-in for gen_burnin generations): create a population of N_anc individuals
1
{
    sim.addSubpop("p1", N);
}
50000  late() {
    p1.outputSample(100, F, "*", d_folder + "/output" + d_rep + ".txt", F); //output 100 haploid genomes in the full format
    sim.outputFixedMutations(d_folder + "/output" + d_rep + ".fixed", append=F); //output substitutions
}
