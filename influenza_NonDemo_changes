initialize() {
	initializeMutationRate(2.3e-3);
	
	initializeMutationType("m1", 1.0, "f", 0.0); //neutral, s = 0
	initializeMutationType("m2", 1.0, "s", "return runif(1, -0.00001, -0.000001);"); //weakly deleterious, 1<|2Nes|<10, uniform distribution
	initializeMutationType("m3", 1.0, "s", "return runif(1, -0.0001, -0.00001);"); //moderately deleterious, 10<|2Nes|<100, uniform distribution
	initializeMutationType("m4", 1.0, "s", "return runif(1, -1.0, -0.0001);"); //strongly deleterious, 100<|2Nes|<10000, uniform distribution
	
	initializeGenomicElementType("g1", c(m1,m2,m3,m4), c(0.25, 0.25, 0.25, 0.25));
	initializeGenomicElement(g1, 0, 2341);
	initializeRecombinationRate(0);
}1 {
	defineConstant("N",1e6);
	sim.addSubpop("p1", N);
	p1.setCloningRate(1.0);
	defineConstant("mmcgens2",c(2:10000040));
	defineConstant("psi",0.067);
	if(psi!=0){
		for(gen in mmcgens2){
			
			sim.registerEarlyEvent(NULL,s2.source, gen, gen);
			sim.registerModifyChildCallback(NULL,s3.source,NULL,gen,gen);
			sim.registerLateEvent(NULL,s4.source, gen, gen);
		
		}}
	
	sim.deregisterScriptBlock(s2);
	sim.deregisterScriptBlock(s3);
	sim.deregisterScriptBlock(s4);
}


s2 2 early(){
	sim.addSubpopSplit(2,1,p1);
	p1.setCloningRate(1.0);
	p1.setMigrationRates(2, psi);
	countingp1= N-round(N*psi);
	countingother=round(N-countingp1);
	countingp1=countingp1+(N-(countingp1+(countingother)));
	p1.tag=asInteger(countingp1);
	p2.tag=asInteger(countingother);
}

s3 2 modifyChild(){
	if(subpop.id==1){
		if (sourceSubpop.id==1 & p1.tag==0){
			return(F);}
		else if (sourceSubpop.tag==0){
			return(F);}
		else{
			sourceSubpop.tag=asInteger(sourceSubpop.tag-1);
			return(T);}}
	else{return(T);}
}


s4 2 late(){
	p2.setSubpopulationSize(0);
}

late() {
	// remove any new mutations added to the disabled diploid genomes
	sim.subpopulations.individuals.genome2.removeMutations();
	
	// remove mutations in the haploid genomes that have fixed
	muts = sim.mutationsOfType(m1);
	freqs = sim.mutationFrequencies(NULL, muts);
	sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
	
	muts = sim.mutationsOfType(m2);
	freqs = sim.mutationFrequencies(NULL, muts);
	sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);

	muts = sim.mutationsOfType(m3);
	freqs = sim.mutationFrequencies(NULL, muts);
	sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);

	muts = sim.mutationsOfType(m4);
	freqs = sim.mutationFrequencies(NULL, muts);
	sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);

}

}10000040 late() {
	sim.outputFixedMutations();
	p1.outputMSSample(100, replace=F, filePath="./ms.txt");
	sim.outputFixedMutations("./muts.txt", append=F);
}


